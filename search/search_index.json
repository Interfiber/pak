{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pak Pak allows you to build MacOS installer files with ease Why? Since apple removed Package Maker from Xcode, its been hard to make pkg installer files. The only preinstalled tools to build them are pkgbuild , and productbuild . Since these tools have little documentation on apples website, it can be hard to use them if you just want to quickly build a package installer for you're software. This is why pak exists, to simplify the installer building process.","title":"Pak"},{"location":"#pak","text":"Pak allows you to build MacOS installer files with ease","title":"Pak"},{"location":"#why","text":"Since apple removed Package Maker from Xcode, its been hard to make pkg installer files. The only preinstalled tools to build them are pkgbuild , and productbuild . Since these tools have little documentation on apples website, it can be hard to use them if you just want to quickly build a package installer for you're software. This is why pak exists, to simplify the installer building process.","title":"Why?"},{"location":"install/","text":"Installing Pak Dependencies MacOS cli tools installed xcode-select --install Lua version 5.4.3 Luarocks version 3.7.0 Installing pak After you have installed all of the dependencies run the following command in you're terminal /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Interfiber/pak/main/tools/installer ) \" After the install completes add the following line to you're shell profile if you have not already source $HOME /.pak/source_file","title":"Installing Pak"},{"location":"install/#installing-pak","text":"","title":"Installing Pak"},{"location":"install/#dependencies","text":"MacOS cli tools installed xcode-select --install Lua version 5.4.3 Luarocks version 3.7.0","title":"Dependencies"},{"location":"install/#installing-pak_1","text":"After you have installed all of the dependencies run the following command in you're terminal /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Interfiber/pak/main/tools/installer ) \" After the install completes add the following line to you're shell profile if you have not already source $HOME /.pak/source_file","title":"Installing pak"},{"location":"newproject/","text":"Creating a New Project Create a new project To create a new project create a new empty folder, then change you're working directory to be that folder. Then you can generate a new project using the following command pak new Using pak_conf.lua Note This is not a full overview of all of the keys, and values in pak_conf.lua see the project build file section for more info. The new project generator will create a file called pak_conf.lua this is where we will be configuring our project First lets change our project name by editing the value of project_name to be whatever we want, I'll use My Epic Project .","title":"Creating a New Project"},{"location":"newproject/#creating-a-new-project","text":"","title":"Creating a New Project"},{"location":"newproject/#create-a-new-project","text":"To create a new project create a new empty folder, then change you're working directory to be that folder. Then you can generate a new project using the following command pak new","title":"Create a new project"},{"location":"newproject/#using-pak_conflua","text":"Note This is not a full overview of all of the keys, and values in pak_conf.lua see the project build file section for more info. The new project generator will create a file called pak_conf.lua this is where we will be configuring our project First lets change our project name by editing the value of project_name to be whatever we want, I'll use My Epic Project .","title":"Using pak_conf.lua"},{"location":"projectfile/","text":"Project File Docs org_id [String] The organization id org_id = \"dev.interiber.pak\" pkg_name [String] The Package Name pkg_name = \"SuperEpicPackage\" Warning This name should not have any spaces in it project_name [String] The name of the current project project_name = \"Super Epic Project\" Note Unlike pkg_name this can have spaces in the name. version [String] The current project version using Semantic Versioning version = \"0.0.1\" Section: Apperance apperance [Table] Package apperance data apperance = { welcome_html = \"welcome.html\" } Note The apperance table must have apperance data inside it. apperance.finished_html [String] Relative path to a html document to be shown after the software installation completes apperance . finished_html = \"complete.html\" apperance.license_file [String] Relative path to a txt file of the project license, the user must agree to this in order to proceed with the software install apperance . license_file = \"LICENSE.txt\" apperance.readme [String] Relative path to a README file, this is shown to use the user before the install. apperance . readme = \"README.txt\" Note The mime type of the README is text/plain but if the file contains html, the installer software will set the mime type to text/html apperance.welcome_html [String] Relative path to a html file to be shown to the user on the very first page of the installer apperance . welcome_html = \"welcome.html\" Section: Components components [Table] List of installer components to build components . amazing = { -- installer component data here } Note For more info on how a installer component data structure is created look at the section below Section: Component component.install_folder [String] Direct path to the installation location components . amazing . install_folder = \"/Library/AmazingSoftware\" Note If the given path does not exist it will create it automatically component.name [String] Name of the installer component components . amazing . name = \"AmazingSoftware\" Warning This name should not have any spaces in it component.payload [String] Relative path to the installer payload, everthing from the given folder will be copied into the installer location of the current component components . amazing . payload = \"dist/AmazingSoftware\" component.visible [Bool] Dictates if the current component is visible in the installer customization screen components . amazing . visible = false Note If you're package has multiple components, it might be a good idea to make sure the default one is not visible to the user can't select it. component.selected [Bool] Dictates if the current component is selected by default in the installer customization screen components . other . selected = true","title":"Project File Docs"},{"location":"projectfile/#project-file-docs","text":"","title":"Project File Docs"},{"location":"projectfile/#org_id-string","text":"The organization id org_id = \"dev.interiber.pak\"","title":"org_id [String]"},{"location":"projectfile/#pkg_name-string","text":"The Package Name pkg_name = \"SuperEpicPackage\" Warning This name should not have any spaces in it","title":"pkg_name [String]"},{"location":"projectfile/#project_name-string","text":"The name of the current project project_name = \"Super Epic Project\" Note Unlike pkg_name this can have spaces in the name.","title":"project_name [String]"},{"location":"projectfile/#version-string","text":"The current project version using Semantic Versioning version = \"0.0.1\"","title":"version [String]"},{"location":"projectfile/#section-apperance","text":"","title":"Section: Apperance"},{"location":"projectfile/#apperance-table","text":"Package apperance data apperance = { welcome_html = \"welcome.html\" } Note The apperance table must have apperance data inside it.","title":"apperance [Table]"},{"location":"projectfile/#apperancefinished_html-string","text":"Relative path to a html document to be shown after the software installation completes apperance . finished_html = \"complete.html\"","title":"apperance.finished_html [String]"},{"location":"projectfile/#apperancelicense_file-string","text":"Relative path to a txt file of the project license, the user must agree to this in order to proceed with the software install apperance . license_file = \"LICENSE.txt\"","title":"apperance.license_file [String]"},{"location":"projectfile/#apperancereadme-string","text":"Relative path to a README file, this is shown to use the user before the install. apperance . readme = \"README.txt\" Note The mime type of the README is text/plain but if the file contains html, the installer software will set the mime type to text/html","title":"apperance.readme [String]"},{"location":"projectfile/#apperancewelcome_html-string","text":"Relative path to a html file to be shown to the user on the very first page of the installer apperance . welcome_html = \"welcome.html\"","title":"apperance.welcome_html [String]"},{"location":"projectfile/#section-components","text":"","title":"Section: Components"},{"location":"projectfile/#components-table","text":"List of installer components to build components . amazing = { -- installer component data here } Note For more info on how a installer component data structure is created look at the section below","title":"components [Table]"},{"location":"projectfile/#section-component","text":"","title":"Section: Component"},{"location":"projectfile/#componentinstall_folder-string","text":"Direct path to the installation location components . amazing . install_folder = \"/Library/AmazingSoftware\" Note If the given path does not exist it will create it automatically","title":"component.install_folder [String]"},{"location":"projectfile/#componentname-string","text":"Name of the installer component components . amazing . name = \"AmazingSoftware\" Warning This name should not have any spaces in it","title":"component.name [String]"},{"location":"projectfile/#componentpayload-string","text":"Relative path to the installer payload, everthing from the given folder will be copied into the installer location of the current component components . amazing . payload = \"dist/AmazingSoftware\"","title":"component.payload [String]"},{"location":"projectfile/#componentvisible-bool","text":"Dictates if the current component is visible in the installer customization screen components . amazing . visible = false Note If you're package has multiple components, it might be a good idea to make sure the default one is not visible to the user can't select it.","title":"component.visible [Bool]"},{"location":"projectfile/#componentselected-bool","text":"Dictates if the current component is selected by default in the installer customization screen components . other . selected = true","title":"component.selected [Bool]"}]}